#!/bin/python3

"""
    This script performs a build status analysis on the outputs of the workflow
    to generate tables that can then be plotted by another program.

    The generated table gives the amount of images that have been built
    sucessfully, and the amount of images that failed to build, for each
    category of error.
"""

import argparse
import csv
import os

def analysis(input_tables):
    """
    Analyzes the given build status tables to count the results of the building
    of the Dockerfile for each category.

    Parameters
    ----------
    input_tables: str
        Tables to analyse.

    Returns
    -------
    dict
        Output table of the analysis in the form of a dict with headers as keys.
    """
    buildstatus = {}
    for table in input_tables:
        # # There has never been any error:
        # if table == [[]]:
        #     if "never_failed" not in buildstatus:
        #             buildstatus["never_failed"] = 1
        #     else:
        #         buildstatus["never_failed"] += 1
        # # There has been an error at least once:
        # else:
        for row in table:
            # Third column is the result:
            if row[2] not in buildstatus:
                buildstatus[row[2]] = 1
            else:
                buildstatus[row[2]] += 1
    return buildstatus

def main():
    # Command line arguments parsing:
    parser = argparse.ArgumentParser(
        prog = "buildstatus_analysis",
        description =
        """
        This script performs a build status analysis on the outputs of the
        workflow to generate tables that can then be plotted by another program.
        The generated table gives the amount of images that have been
        built sucessfully, and the amount of images that failed to build,
        for each category of error.
        """
    )
    parser.add_argument(
        "-v", "--verbose",
        action = "store_true",
        help = "Shows more details on what is being done."
    )
    parser.add_argument(
        "-i", "--input",
        action = "append",
        help =
        """
        The CSV file used as input for the analysis function. Multiple files
        can be specified by repeating this argument with different paths.
        All the input files must be build status logs generated by ECG.
        """,
        required = True
    )
    parser.add_argument(
        "-o", "--output",
        help =
        """
        Path to the output CSV file that will be created by the analysis function.
        """,
        required = True
    )
    args = parser.parse_args()
    input_paths = args.input
    output_path = args.output

    # Parsing the input files:
    input_tables = []
    for path in input_paths:
        input_file = open(path)
        input_tables.append(list(csv.reader(input_file)))
        input_file.close()

    # Analyzing the inputs:
    output_file = open(output_path, "w+")
    output_dict = {}
    output_dict = analysis(input_tables)

    # Writing analysis to output file:
    dict_writer = csv.DictWriter(output_file, fieldnames=output_dict.keys())
    dict_writer.writeheader()
    dict_writer.writerow(output_dict)
    output_file.close()

if __name__ == "__main__":
    main()